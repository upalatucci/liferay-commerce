/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.app.builder.it.uad.anonymizer;

import com.liferay.app.builder.it.model.AppBuilderModuleEntry;
import com.liferay.app.builder.it.service.AppBuilderModuleEntryLocalService;
import com.liferay.app.builder.it.uad.constants.AppBuilderItUADConstants;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.User;
import com.liferay.user.associated.data.anonymizer.DynamicQueryUADAnonymizer;

import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the app builder module entry UAD anonymizer.
 *
 * <p>
 * This implementation exists only as a container for the default methods
 * generated by ServiceBuilder. All custom service methods should be put in
 * {@link AppBuilderModuleEntryUADAnonymizer}.
 * </p>
 *
 * @author Marco Leo
 * @generated
 */
public abstract class BaseAppBuilderModuleEntryUADAnonymizer
	extends DynamicQueryUADAnonymizer<AppBuilderModuleEntry> {

	@Override
	public void autoAnonymize(
			AppBuilderModuleEntry appBuilderModuleEntry, long userId,
			User anonymousUser)
		throws PortalException {

		if (appBuilderModuleEntry.getUserId() == userId) {
			appBuilderModuleEntry.setUserId(anonymousUser.getUserId());
			appBuilderModuleEntry.setUserName(anonymousUser.getFullName());
		}

		if (appBuilderModuleEntry.getStatusByUserId() == userId) {
			appBuilderModuleEntry.setStatusByUserId(anonymousUser.getUserId());
			appBuilderModuleEntry.setStatusByUserName(
				anonymousUser.getFullName());
		}

		appBuilderModuleEntryLocalService.updateAppBuilderModuleEntry(
			appBuilderModuleEntry);
	}

	@Override
	public void delete(AppBuilderModuleEntry appBuilderModuleEntry)
		throws PortalException {

		appBuilderModuleEntryLocalService.deleteAppBuilderModuleEntry(
			appBuilderModuleEntry);
	}

	@Override
	public Class<AppBuilderModuleEntry> getTypeClass() {
		return AppBuilderModuleEntry.class;
	}

	@Override
	protected ActionableDynamicQuery doGetActionableDynamicQuery() {
		return appBuilderModuleEntryLocalService.getActionableDynamicQuery();
	}

	@Override
	protected String[] doGetUserIdFieldNames() {
		return AppBuilderItUADConstants.
			USER_ID_FIELD_NAMES_APP_BUILDER_MODULE_ENTRY;
	}

	@Reference
	protected AppBuilderModuleEntryLocalService
		appBuilderModuleEntryLocalService;

}