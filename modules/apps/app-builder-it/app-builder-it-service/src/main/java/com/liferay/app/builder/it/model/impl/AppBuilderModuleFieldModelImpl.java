/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.app.builder.it.model.impl;

import com.liferay.app.builder.it.model.AppBuilderModuleField;
import com.liferay.app.builder.it.model.AppBuilderModuleFieldModel;
import com.liferay.app.builder.it.model.AppBuilderModuleFieldSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AppBuilderModuleField service. Represents a row in the &quot;AppBuilderModuleField&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AppBuilderModuleFieldModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AppBuilderModuleFieldImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see AppBuilderModuleFieldImpl
 * @generated
 */
@JSON(strict = true)
public class AppBuilderModuleFieldModelImpl
	extends BaseModelImpl<AppBuilderModuleField>
	implements AppBuilderModuleFieldModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a app builder module field model instance should use the <code>AppBuilderModuleField</code> interface instead.
	 */
	public static final String TABLE_NAME = "AppBuilderModuleField";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"appBuilderModuleFieldId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"appBuilderModuleId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"label", Types.VARCHAR},
		{"dbColumnName", Types.VARCHAR}, {"type_", Types.VARCHAR},
		{"typeSettings", Types.VARCHAR}, {"nullable", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appBuilderModuleFieldId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("appBuilderModuleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("label", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dbColumnName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeSettings", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nullable", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AppBuilderModuleField (uuid_ VARCHAR(75) null,appBuilderModuleFieldId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,appBuilderModuleId LONG,name VARCHAR(75) null,label STRING null,dbColumnName VARCHAR(75) null,type_ VARCHAR(75) null,typeSettings VARCHAR(75) null,nullable BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table AppBuilderModuleField";

	public static final String ORDER_BY_JPQL =
		" ORDER BY appBuilderModuleField.appBuilderModuleFieldId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AppBuilderModuleField.appBuilderModuleFieldId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPBUILDERMODULEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPBUILDERMODULEFIELDID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static AppBuilderModuleField toModel(
		AppBuilderModuleFieldSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		AppBuilderModuleField model = new AppBuilderModuleFieldImpl();

		model.setUuid(soapModel.getUuid());
		model.setAppBuilderModuleFieldId(
			soapModel.getAppBuilderModuleFieldId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAppBuilderModuleId(soapModel.getAppBuilderModuleId());
		model.setName(soapModel.getName());
		model.setLabel(soapModel.getLabel());
		model.setDbColumnName(soapModel.getDbColumnName());
		model.setType(soapModel.getType());
		model.setTypeSettings(soapModel.getTypeSettings());
		model.setNullable(soapModel.isNullable());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<AppBuilderModuleField> toModels(
		AppBuilderModuleFieldSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<AppBuilderModuleField> models =
			new ArrayList<AppBuilderModuleField>(soapModels.length);

		for (AppBuilderModuleFieldSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public AppBuilderModuleFieldModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _appBuilderModuleFieldId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAppBuilderModuleFieldId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _appBuilderModuleFieldId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AppBuilderModuleField.class;
	}

	@Override
	public String getModelClassName() {
		return AppBuilderModuleField.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AppBuilderModuleField, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AppBuilderModuleField, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AppBuilderModuleField, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AppBuilderModuleField)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AppBuilderModuleField, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AppBuilderModuleField, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AppBuilderModuleField)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AppBuilderModuleField, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AppBuilderModuleField, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AppBuilderModuleField>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AppBuilderModuleField.class.getClassLoader(),
			AppBuilderModuleField.class, ModelWrapper.class);

		try {
			Constructor<AppBuilderModuleField> constructor =
				(Constructor<AppBuilderModuleField>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AppBuilderModuleField, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AppBuilderModuleField, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AppBuilderModuleField, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<AppBuilderModuleField, Object>>();
		Map<String, BiConsumer<AppBuilderModuleField, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<AppBuilderModuleField, ?>>();

		attributeGetterFunctions.put("uuid", AppBuilderModuleField::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<AppBuilderModuleField, String>)
				AppBuilderModuleField::setUuid);
		attributeGetterFunctions.put(
			"appBuilderModuleFieldId",
			AppBuilderModuleField::getAppBuilderModuleFieldId);
		attributeSetterBiConsumers.put(
			"appBuilderModuleFieldId",
			(BiConsumer<AppBuilderModuleField, Long>)
				AppBuilderModuleField::setAppBuilderModuleFieldId);
		attributeGetterFunctions.put(
			"companyId", AppBuilderModuleField::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<AppBuilderModuleField, Long>)
				AppBuilderModuleField::setCompanyId);
		attributeGetterFunctions.put(
			"userId", AppBuilderModuleField::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<AppBuilderModuleField, Long>)
				AppBuilderModuleField::setUserId);
		attributeGetterFunctions.put(
			"userName", AppBuilderModuleField::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<AppBuilderModuleField, String>)
				AppBuilderModuleField::setUserName);
		attributeGetterFunctions.put(
			"createDate", AppBuilderModuleField::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<AppBuilderModuleField, Date>)
				AppBuilderModuleField::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", AppBuilderModuleField::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<AppBuilderModuleField, Date>)
				AppBuilderModuleField::setModifiedDate);
		attributeGetterFunctions.put(
			"appBuilderModuleId", AppBuilderModuleField::getAppBuilderModuleId);
		attributeSetterBiConsumers.put(
			"appBuilderModuleId",
			(BiConsumer<AppBuilderModuleField, Long>)
				AppBuilderModuleField::setAppBuilderModuleId);
		attributeGetterFunctions.put("name", AppBuilderModuleField::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<AppBuilderModuleField, String>)
				AppBuilderModuleField::setName);
		attributeGetterFunctions.put("label", AppBuilderModuleField::getLabel);
		attributeSetterBiConsumers.put(
			"label",
			(BiConsumer<AppBuilderModuleField, String>)
				AppBuilderModuleField::setLabel);
		attributeGetterFunctions.put(
			"dbColumnName", AppBuilderModuleField::getDbColumnName);
		attributeSetterBiConsumers.put(
			"dbColumnName",
			(BiConsumer<AppBuilderModuleField, String>)
				AppBuilderModuleField::setDbColumnName);
		attributeGetterFunctions.put("type", AppBuilderModuleField::getType);
		attributeSetterBiConsumers.put(
			"type",
			(BiConsumer<AppBuilderModuleField, String>)
				AppBuilderModuleField::setType);
		attributeGetterFunctions.put(
			"typeSettings", AppBuilderModuleField::getTypeSettings);
		attributeSetterBiConsumers.put(
			"typeSettings",
			(BiConsumer<AppBuilderModuleField, String>)
				AppBuilderModuleField::setTypeSettings);
		attributeGetterFunctions.put(
			"nullable", AppBuilderModuleField::getNullable);
		attributeSetterBiConsumers.put(
			"nullable",
			(BiConsumer<AppBuilderModuleField, Boolean>)
				AppBuilderModuleField::setNullable);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAppBuilderModuleFieldId() {
		return _appBuilderModuleFieldId;
	}

	@Override
	public void setAppBuilderModuleFieldId(long appBuilderModuleFieldId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appBuilderModuleFieldId = appBuilderModuleFieldId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getAppBuilderModuleId() {
		return _appBuilderModuleId;
	}

	@Override
	public void setAppBuilderModuleId(long appBuilderModuleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appBuilderModuleId = appBuilderModuleId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAppBuilderModuleId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("appBuilderModuleId"));
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getLabel() {
		if (_label == null) {
			return "";
		}
		else {
			return _label;
		}
	}

	@Override
	public String getLabel(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLabel(languageId);
	}

	@Override
	public String getLabel(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLabel(languageId, useDefault);
	}

	@Override
	public String getLabel(String languageId) {
		return LocalizationUtil.getLocalization(getLabel(), languageId);
	}

	@Override
	public String getLabel(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getLabel(), languageId, useDefault);
	}

	@Override
	public String getLabelCurrentLanguageId() {
		return _labelCurrentLanguageId;
	}

	@JSON
	@Override
	public String getLabelCurrentValue() {
		Locale locale = getLocale(_labelCurrentLanguageId);

		return getLabel(locale);
	}

	@Override
	public Map<Locale, String> getLabelMap() {
		return LocalizationUtil.getLocalizationMap(getLabel());
	}

	@Override
	public void setLabel(String label) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_label = label;
	}

	@Override
	public void setLabel(String label, Locale locale) {
		setLabel(label, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setLabel(String label, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(label)) {
			setLabel(
				LocalizationUtil.updateLocalization(
					getLabel(), "Label", label, languageId, defaultLanguageId));
		}
		else {
			setLabel(
				LocalizationUtil.removeLocalization(
					getLabel(), "Label", languageId));
		}
	}

	@Override
	public void setLabelCurrentLanguageId(String languageId) {
		_labelCurrentLanguageId = languageId;
	}

	@Override
	public void setLabelMap(Map<Locale, String> labelMap) {
		setLabelMap(labelMap, LocaleUtil.getDefault());
	}

	@Override
	public void setLabelMap(
		Map<Locale, String> labelMap, Locale defaultLocale) {

		if (labelMap == null) {
			return;
		}

		setLabel(
			LocalizationUtil.updateLocalization(
				labelMap, getLabel(), "Label",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDbColumnName() {
		if (_dbColumnName == null) {
			return "";
		}
		else {
			return _dbColumnName;
		}
	}

	@Override
	public void setDbColumnName(String dbColumnName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dbColumnName = dbColumnName;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	@JSON
	@Override
	public String getTypeSettings() {
		if (_typeSettings == null) {
			return "";
		}
		else {
			return _typeSettings;
		}
	}

	@Override
	public void setTypeSettings(String typeSettings) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeSettings = typeSettings;
	}

	@JSON
	@Override
	public boolean getNullable() {
		return _nullable;
	}

	@JSON
	@Override
	public boolean isNullable() {
		return _nullable;
	}

	@Override
	public void setNullable(boolean nullable) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nullable = nullable;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AppBuilderModuleField.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AppBuilderModuleField.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> labelMap = getLabelMap();

		for (Map.Entry<Locale, String> entry : labelMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getLabel();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			AppBuilderModuleField.class.getName(), getPrimaryKey(),
			defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String label = getLabel(defaultLocale);

		if (Validator.isNull(label)) {
			setLabel(getLabel(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setLabel(getLabel(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public AppBuilderModuleField toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AppBuilderModuleField>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AppBuilderModuleFieldImpl appBuilderModuleFieldImpl =
			new AppBuilderModuleFieldImpl();

		appBuilderModuleFieldImpl.setUuid(getUuid());
		appBuilderModuleFieldImpl.setAppBuilderModuleFieldId(
			getAppBuilderModuleFieldId());
		appBuilderModuleFieldImpl.setCompanyId(getCompanyId());
		appBuilderModuleFieldImpl.setUserId(getUserId());
		appBuilderModuleFieldImpl.setUserName(getUserName());
		appBuilderModuleFieldImpl.setCreateDate(getCreateDate());
		appBuilderModuleFieldImpl.setModifiedDate(getModifiedDate());
		appBuilderModuleFieldImpl.setAppBuilderModuleId(
			getAppBuilderModuleId());
		appBuilderModuleFieldImpl.setName(getName());
		appBuilderModuleFieldImpl.setLabel(getLabel());
		appBuilderModuleFieldImpl.setDbColumnName(getDbColumnName());
		appBuilderModuleFieldImpl.setType(getType());
		appBuilderModuleFieldImpl.setTypeSettings(getTypeSettings());
		appBuilderModuleFieldImpl.setNullable(isNullable());

		appBuilderModuleFieldImpl.resetOriginalValues();

		return appBuilderModuleFieldImpl;
	}

	@Override
	public int compareTo(AppBuilderModuleField appBuilderModuleField) {
		long primaryKey = appBuilderModuleField.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AppBuilderModuleField)) {
			return false;
		}

		AppBuilderModuleField appBuilderModuleField =
			(AppBuilderModuleField)object;

		long primaryKey = appBuilderModuleField.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AppBuilderModuleField> toCacheModel() {
		AppBuilderModuleFieldCacheModel appBuilderModuleFieldCacheModel =
			new AppBuilderModuleFieldCacheModel();

		appBuilderModuleFieldCacheModel.uuid = getUuid();

		String uuid = appBuilderModuleFieldCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			appBuilderModuleFieldCacheModel.uuid = null;
		}

		appBuilderModuleFieldCacheModel.appBuilderModuleFieldId =
			getAppBuilderModuleFieldId();

		appBuilderModuleFieldCacheModel.companyId = getCompanyId();

		appBuilderModuleFieldCacheModel.userId = getUserId();

		appBuilderModuleFieldCacheModel.userName = getUserName();

		String userName = appBuilderModuleFieldCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			appBuilderModuleFieldCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			appBuilderModuleFieldCacheModel.createDate = createDate.getTime();
		}
		else {
			appBuilderModuleFieldCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			appBuilderModuleFieldCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			appBuilderModuleFieldCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		appBuilderModuleFieldCacheModel.appBuilderModuleId =
			getAppBuilderModuleId();

		appBuilderModuleFieldCacheModel.name = getName();

		String name = appBuilderModuleFieldCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			appBuilderModuleFieldCacheModel.name = null;
		}

		appBuilderModuleFieldCacheModel.label = getLabel();

		String label = appBuilderModuleFieldCacheModel.label;

		if ((label != null) && (label.length() == 0)) {
			appBuilderModuleFieldCacheModel.label = null;
		}

		appBuilderModuleFieldCacheModel.dbColumnName = getDbColumnName();

		String dbColumnName = appBuilderModuleFieldCacheModel.dbColumnName;

		if ((dbColumnName != null) && (dbColumnName.length() == 0)) {
			appBuilderModuleFieldCacheModel.dbColumnName = null;
		}

		appBuilderModuleFieldCacheModel.type = getType();

		String type = appBuilderModuleFieldCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			appBuilderModuleFieldCacheModel.type = null;
		}

		appBuilderModuleFieldCacheModel.typeSettings = getTypeSettings();

		String typeSettings = appBuilderModuleFieldCacheModel.typeSettings;

		if ((typeSettings != null) && (typeSettings.length() == 0)) {
			appBuilderModuleFieldCacheModel.typeSettings = null;
		}

		appBuilderModuleFieldCacheModel.nullable = isNullable();

		return appBuilderModuleFieldCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AppBuilderModuleField, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AppBuilderModuleField, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AppBuilderModuleField, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((AppBuilderModuleField)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AppBuilderModuleField, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AppBuilderModuleField, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AppBuilderModuleField, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((AppBuilderModuleField)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AppBuilderModuleField>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _appBuilderModuleFieldId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _appBuilderModuleId;
	private String _name;
	private String _label;
	private String _labelCurrentLanguageId;
	private String _dbColumnName;
	private String _type;
	private String _typeSettings;
	private boolean _nullable;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AppBuilderModuleField, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AppBuilderModuleField)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"appBuilderModuleFieldId", _appBuilderModuleFieldId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("appBuilderModuleId", _appBuilderModuleId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("label", _label);
		_columnOriginalValues.put("dbColumnName", _dbColumnName);
		_columnOriginalValues.put("type_", _type);
		_columnOriginalValues.put("typeSettings", _typeSettings);
		_columnOriginalValues.put("nullable", _nullable);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("type_", "type");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("appBuilderModuleFieldId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("appBuilderModuleId", 128L);

		columnBitmasks.put("name", 256L);

		columnBitmasks.put("label", 512L);

		columnBitmasks.put("dbColumnName", 1024L);

		columnBitmasks.put("type_", 2048L);

		columnBitmasks.put("typeSettings", 4096L);

		columnBitmasks.put("nullable", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AppBuilderModuleField _escapedModel;

}