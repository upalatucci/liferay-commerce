/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.app.builder.it.model.impl;

import com.liferay.app.builder.it.model.AppBuilderModule;
import com.liferay.app.builder.it.model.AppBuilderModuleModel;
import com.liferay.app.builder.it.model.AppBuilderModuleSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AppBuilderModule service. Represents a row in the &quot;AppBuilderModule&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AppBuilderModuleModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AppBuilderModuleImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see AppBuilderModuleImpl
 * @generated
 */
@JSON(strict = true)
public class AppBuilderModuleModelImpl
	extends BaseModelImpl<AppBuilderModule> implements AppBuilderModuleModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a app builder module model instance should use the <code>AppBuilderModule</code> interface instead.
	 */
	public static final String TABLE_NAME = "AppBuilderModule";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"appBuilderModuleId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"active_", Types.BOOLEAN},
		{"name", Types.VARCHAR}, {"label", Types.VARCHAR},
		{"dbTableName", Types.VARCHAR}, {"dbTablePKColumnName", Types.VARCHAR},
		{"scope", Types.VARCHAR}, {"resourceName", Types.VARCHAR},
		{"asset", Types.BOOLEAN}, {"resource", Types.BOOLEAN},
		{"expando", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appBuilderModuleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("label", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dbTableName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dbTablePKColumnName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("scope", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("resourceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("asset", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("resource", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("expando", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AppBuilderModule (uuid_ VARCHAR(75) null,appBuilderModuleId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,active_ BOOLEAN,name VARCHAR(75) null,label STRING null,dbTableName VARCHAR(75) null,dbTablePKColumnName VARCHAR(75) null,scope VARCHAR(75) null,resourceName VARCHAR(75) null,asset BOOLEAN,resource BOOLEAN,expando BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table AppBuilderModule";

	public static final String ORDER_BY_JPQL =
		" ORDER BY appBuilderModule.appBuilderModuleId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AppBuilderModule.appBuilderModuleId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPBUILDERMODULEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static AppBuilderModule toModel(AppBuilderModuleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AppBuilderModule model = new AppBuilderModuleImpl();

		model.setUuid(soapModel.getUuid());
		model.setAppBuilderModuleId(soapModel.getAppBuilderModuleId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setActive(soapModel.isActive());
		model.setName(soapModel.getName());
		model.setLabel(soapModel.getLabel());
		model.setDbTableName(soapModel.getDbTableName());
		model.setDbTablePKColumnName(soapModel.getDbTablePKColumnName());
		model.setScope(soapModel.getScope());
		model.setResourceName(soapModel.getResourceName());
		model.setAsset(soapModel.isAsset());
		model.setResource(soapModel.isResource());
		model.setExpando(soapModel.isExpando());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<AppBuilderModule> toModels(
		AppBuilderModuleSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<AppBuilderModule> models = new ArrayList<AppBuilderModule>(
			soapModels.length);

		for (AppBuilderModuleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public AppBuilderModuleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _appBuilderModuleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAppBuilderModuleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _appBuilderModuleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AppBuilderModule.class;
	}

	@Override
	public String getModelClassName() {
		return AppBuilderModule.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AppBuilderModule, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AppBuilderModule, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AppBuilderModule, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AppBuilderModule)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AppBuilderModule, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AppBuilderModule, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AppBuilderModule)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AppBuilderModule, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AppBuilderModule, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AppBuilderModule>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AppBuilderModule.class.getClassLoader(), AppBuilderModule.class,
			ModelWrapper.class);

		try {
			Constructor<AppBuilderModule> constructor =
				(Constructor<AppBuilderModule>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<AppBuilderModule, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AppBuilderModule, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AppBuilderModule, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<AppBuilderModule, Object>>();
		Map<String, BiConsumer<AppBuilderModule, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<AppBuilderModule, ?>>();

		attributeGetterFunctions.put("uuid", AppBuilderModule::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<AppBuilderModule, String>)AppBuilderModule::setUuid);
		attributeGetterFunctions.put(
			"appBuilderModuleId", AppBuilderModule::getAppBuilderModuleId);
		attributeSetterBiConsumers.put(
			"appBuilderModuleId",
			(BiConsumer<AppBuilderModule, Long>)
				AppBuilderModule::setAppBuilderModuleId);
		attributeGetterFunctions.put(
			"companyId", AppBuilderModule::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<AppBuilderModule, Long>)AppBuilderModule::setCompanyId);
		attributeGetterFunctions.put("userId", AppBuilderModule::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<AppBuilderModule, Long>)AppBuilderModule::setUserId);
		attributeGetterFunctions.put("userName", AppBuilderModule::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<AppBuilderModule, String>)
				AppBuilderModule::setUserName);
		attributeGetterFunctions.put(
			"createDate", AppBuilderModule::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<AppBuilderModule, Date>)
				AppBuilderModule::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", AppBuilderModule::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<AppBuilderModule, Date>)
				AppBuilderModule::setModifiedDate);
		attributeGetterFunctions.put("active", AppBuilderModule::getActive);
		attributeSetterBiConsumers.put(
			"active",
			(BiConsumer<AppBuilderModule, Boolean>)AppBuilderModule::setActive);
		attributeGetterFunctions.put("name", AppBuilderModule::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<AppBuilderModule, String>)AppBuilderModule::setName);
		attributeGetterFunctions.put("label", AppBuilderModule::getLabel);
		attributeSetterBiConsumers.put(
			"label",
			(BiConsumer<AppBuilderModule, String>)AppBuilderModule::setLabel);
		attributeGetterFunctions.put(
			"dbTableName", AppBuilderModule::getDbTableName);
		attributeSetterBiConsumers.put(
			"dbTableName",
			(BiConsumer<AppBuilderModule, String>)
				AppBuilderModule::setDbTableName);
		attributeGetterFunctions.put(
			"dbTablePKColumnName", AppBuilderModule::getDbTablePKColumnName);
		attributeSetterBiConsumers.put(
			"dbTablePKColumnName",
			(BiConsumer<AppBuilderModule, String>)
				AppBuilderModule::setDbTablePKColumnName);
		attributeGetterFunctions.put("scope", AppBuilderModule::getScope);
		attributeSetterBiConsumers.put(
			"scope",
			(BiConsumer<AppBuilderModule, String>)AppBuilderModule::setScope);
		attributeGetterFunctions.put(
			"resourceName", AppBuilderModule::getResourceName);
		attributeSetterBiConsumers.put(
			"resourceName",
			(BiConsumer<AppBuilderModule, String>)
				AppBuilderModule::setResourceName);
		attributeGetterFunctions.put("asset", AppBuilderModule::getAsset);
		attributeSetterBiConsumers.put(
			"asset",
			(BiConsumer<AppBuilderModule, Boolean>)AppBuilderModule::setAsset);
		attributeGetterFunctions.put("resource", AppBuilderModule::getResource);
		attributeSetterBiConsumers.put(
			"resource",
			(BiConsumer<AppBuilderModule, Boolean>)
				AppBuilderModule::setResource);
		attributeGetterFunctions.put("expando", AppBuilderModule::getExpando);
		attributeSetterBiConsumers.put(
			"expando",
			(BiConsumer<AppBuilderModule, Boolean>)
				AppBuilderModule::setExpando);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAppBuilderModuleId() {
		return _appBuilderModuleId;
	}

	@Override
	public void setAppBuilderModuleId(long appBuilderModuleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_appBuilderModuleId = appBuilderModuleId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getLabel() {
		if (_label == null) {
			return "";
		}
		else {
			return _label;
		}
	}

	@Override
	public String getLabel(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLabel(languageId);
	}

	@Override
	public String getLabel(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLabel(languageId, useDefault);
	}

	@Override
	public String getLabel(String languageId) {
		return LocalizationUtil.getLocalization(getLabel(), languageId);
	}

	@Override
	public String getLabel(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getLabel(), languageId, useDefault);
	}

	@Override
	public String getLabelCurrentLanguageId() {
		return _labelCurrentLanguageId;
	}

	@JSON
	@Override
	public String getLabelCurrentValue() {
		Locale locale = getLocale(_labelCurrentLanguageId);

		return getLabel(locale);
	}

	@Override
	public Map<Locale, String> getLabelMap() {
		return LocalizationUtil.getLocalizationMap(getLabel());
	}

	@Override
	public void setLabel(String label) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_label = label;
	}

	@Override
	public void setLabel(String label, Locale locale) {
		setLabel(label, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setLabel(String label, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(label)) {
			setLabel(
				LocalizationUtil.updateLocalization(
					getLabel(), "Label", label, languageId, defaultLanguageId));
		}
		else {
			setLabel(
				LocalizationUtil.removeLocalization(
					getLabel(), "Label", languageId));
		}
	}

	@Override
	public void setLabelCurrentLanguageId(String languageId) {
		_labelCurrentLanguageId = languageId;
	}

	@Override
	public void setLabelMap(Map<Locale, String> labelMap) {
		setLabelMap(labelMap, LocaleUtil.getDefault());
	}

	@Override
	public void setLabelMap(
		Map<Locale, String> labelMap, Locale defaultLocale) {

		if (labelMap == null) {
			return;
		}

		setLabel(
			LocalizationUtil.updateLocalization(
				labelMap, getLabel(), "Label",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDbTableName() {
		if (_dbTableName == null) {
			return "";
		}
		else {
			return _dbTableName;
		}
	}

	@Override
	public void setDbTableName(String dbTableName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dbTableName = dbTableName;
	}

	@JSON
	@Override
	public String getDbTablePKColumnName() {
		if (_dbTablePKColumnName == null) {
			return "";
		}
		else {
			return _dbTablePKColumnName;
		}
	}

	@Override
	public void setDbTablePKColumnName(String dbTablePKColumnName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dbTablePKColumnName = dbTablePKColumnName;
	}

	@JSON
	@Override
	public String getScope() {
		if (_scope == null) {
			return "";
		}
		else {
			return _scope;
		}
	}

	@Override
	public void setScope(String scope) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scope = scope;
	}

	@JSON
	@Override
	public String getResourceName() {
		if (_resourceName == null) {
			return "";
		}
		else {
			return _resourceName;
		}
	}

	@Override
	public void setResourceName(String resourceName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_resourceName = resourceName;
	}

	@JSON
	@Override
	public boolean getAsset() {
		return _asset;
	}

	@JSON
	@Override
	public boolean isAsset() {
		return _asset;
	}

	@Override
	public void setAsset(boolean asset) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_asset = asset;
	}

	@JSON
	@Override
	public boolean getResource() {
		return _resource;
	}

	@JSON
	@Override
	public boolean isResource() {
		return _resource;
	}

	@Override
	public void setResource(boolean resource) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_resource = resource;
	}

	@JSON
	@Override
	public boolean getExpando() {
		return _expando;
	}

	@JSON
	@Override
	public boolean isExpando() {
		return _expando;
	}

	@Override
	public void setExpando(boolean expando) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expando = expando;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AppBuilderModule.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AppBuilderModule.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> labelMap = getLabelMap();

		for (Map.Entry<Locale, String> entry : labelMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getLabel();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			AppBuilderModule.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String label = getLabel(defaultLocale);

		if (Validator.isNull(label)) {
			setLabel(getLabel(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setLabel(getLabel(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public AppBuilderModule toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AppBuilderModule>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AppBuilderModuleImpl appBuilderModuleImpl = new AppBuilderModuleImpl();

		appBuilderModuleImpl.setUuid(getUuid());
		appBuilderModuleImpl.setAppBuilderModuleId(getAppBuilderModuleId());
		appBuilderModuleImpl.setCompanyId(getCompanyId());
		appBuilderModuleImpl.setUserId(getUserId());
		appBuilderModuleImpl.setUserName(getUserName());
		appBuilderModuleImpl.setCreateDate(getCreateDate());
		appBuilderModuleImpl.setModifiedDate(getModifiedDate());
		appBuilderModuleImpl.setActive(isActive());
		appBuilderModuleImpl.setName(getName());
		appBuilderModuleImpl.setLabel(getLabel());
		appBuilderModuleImpl.setDbTableName(getDbTableName());
		appBuilderModuleImpl.setDbTablePKColumnName(getDbTablePKColumnName());
		appBuilderModuleImpl.setScope(getScope());
		appBuilderModuleImpl.setResourceName(getResourceName());
		appBuilderModuleImpl.setAsset(isAsset());
		appBuilderModuleImpl.setResource(isResource());
		appBuilderModuleImpl.setExpando(isExpando());

		appBuilderModuleImpl.resetOriginalValues();

		return appBuilderModuleImpl;
	}

	@Override
	public int compareTo(AppBuilderModule appBuilderModule) {
		long primaryKey = appBuilderModule.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AppBuilderModule)) {
			return false;
		}

		AppBuilderModule appBuilderModule = (AppBuilderModule)object;

		long primaryKey = appBuilderModule.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AppBuilderModule> toCacheModel() {
		AppBuilderModuleCacheModel appBuilderModuleCacheModel =
			new AppBuilderModuleCacheModel();

		appBuilderModuleCacheModel.uuid = getUuid();

		String uuid = appBuilderModuleCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			appBuilderModuleCacheModel.uuid = null;
		}

		appBuilderModuleCacheModel.appBuilderModuleId = getAppBuilderModuleId();

		appBuilderModuleCacheModel.companyId = getCompanyId();

		appBuilderModuleCacheModel.userId = getUserId();

		appBuilderModuleCacheModel.userName = getUserName();

		String userName = appBuilderModuleCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			appBuilderModuleCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			appBuilderModuleCacheModel.createDate = createDate.getTime();
		}
		else {
			appBuilderModuleCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			appBuilderModuleCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			appBuilderModuleCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		appBuilderModuleCacheModel.active = isActive();

		appBuilderModuleCacheModel.name = getName();

		String name = appBuilderModuleCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			appBuilderModuleCacheModel.name = null;
		}

		appBuilderModuleCacheModel.label = getLabel();

		String label = appBuilderModuleCacheModel.label;

		if ((label != null) && (label.length() == 0)) {
			appBuilderModuleCacheModel.label = null;
		}

		appBuilderModuleCacheModel.dbTableName = getDbTableName();

		String dbTableName = appBuilderModuleCacheModel.dbTableName;

		if ((dbTableName != null) && (dbTableName.length() == 0)) {
			appBuilderModuleCacheModel.dbTableName = null;
		}

		appBuilderModuleCacheModel.dbTablePKColumnName =
			getDbTablePKColumnName();

		String dbTablePKColumnName =
			appBuilderModuleCacheModel.dbTablePKColumnName;

		if ((dbTablePKColumnName != null) &&
			(dbTablePKColumnName.length() == 0)) {

			appBuilderModuleCacheModel.dbTablePKColumnName = null;
		}

		appBuilderModuleCacheModel.scope = getScope();

		String scope = appBuilderModuleCacheModel.scope;

		if ((scope != null) && (scope.length() == 0)) {
			appBuilderModuleCacheModel.scope = null;
		}

		appBuilderModuleCacheModel.resourceName = getResourceName();

		String resourceName = appBuilderModuleCacheModel.resourceName;

		if ((resourceName != null) && (resourceName.length() == 0)) {
			appBuilderModuleCacheModel.resourceName = null;
		}

		appBuilderModuleCacheModel.asset = isAsset();

		appBuilderModuleCacheModel.resource = isResource();

		appBuilderModuleCacheModel.expando = isExpando();

		return appBuilderModuleCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AppBuilderModule, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AppBuilderModule, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AppBuilderModule, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((AppBuilderModule)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AppBuilderModule, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AppBuilderModule, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AppBuilderModule, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AppBuilderModule)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AppBuilderModule>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _appBuilderModuleId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _active;
	private String _name;
	private String _label;
	private String _labelCurrentLanguageId;
	private String _dbTableName;
	private String _dbTablePKColumnName;
	private String _scope;
	private String _resourceName;
	private boolean _asset;
	private boolean _resource;
	private boolean _expando;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AppBuilderModule, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AppBuilderModule)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("appBuilderModuleId", _appBuilderModuleId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("active_", _active);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("label", _label);
		_columnOriginalValues.put("dbTableName", _dbTableName);
		_columnOriginalValues.put("dbTablePKColumnName", _dbTablePKColumnName);
		_columnOriginalValues.put("scope", _scope);
		_columnOriginalValues.put("resourceName", _resourceName);
		_columnOriginalValues.put("asset", _asset);
		_columnOriginalValues.put("resource", _resource);
		_columnOriginalValues.put("expando", _expando);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("active_", "active");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("appBuilderModuleId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("active_", 128L);

		columnBitmasks.put("name", 256L);

		columnBitmasks.put("label", 512L);

		columnBitmasks.put("dbTableName", 1024L);

		columnBitmasks.put("dbTablePKColumnName", 2048L);

		columnBitmasks.put("scope", 4096L);

		columnBitmasks.put("resourceName", 8192L);

		columnBitmasks.put("asset", 16384L);

		columnBitmasks.put("resource", 32768L);

		columnBitmasks.put("expando", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AppBuilderModule _escapedModel;

}